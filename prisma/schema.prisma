// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String?
  password         String
  emailVerified    DateTime?
  stripeCustomerId String?          @unique
  subscription     Subscription?
  usageStats       UsageStats?
  apiKeys          ApiKey[]
  sessions         Session[]
  preferences      UserPreferences?
  codebaseIndices  CodebaseIndex[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id])
  stripeSubscriptionId String   @unique
  stripePriceId        String
  stripeCustomerId     String
  status               String // 'active', 'canceled', 'past_due', etc.
  planId               String // 'pro', 'turbo', 'business'
  interval             String // 'month', 'year'
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model UsageStats {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  aiRequestsUsed   Int      @default(0)
  codebasesIndexed Int      @default(0)
  lastResetDate    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model SubscriptionEvent {
  id             String   @id @default(cuid())
  type           String // created, updated, deleted
  customerId     String
  subscriptionId String
  status         String
  planId         String
  amount         Int
  interval       String // month, year
  currency       String
  timestamp      DateTime
  createdAt      DateTime @default(now())

  @@index([customerId])
  @@index([subscriptionId])
  @@index([timestamp])
}

model Revenue {
  id             String   @id @default(cuid())
  customerId     String
  amount         Int
  currency       String
  invoiceId      String   @unique
  subscriptionId String?
  timestamp      DateTime
  createdAt      DateTime @default(now())

  @@index([customerId])
  @@index([timestamp])
}

model Charge {
  id         String   @id @default(cuid())
  customerId String
  amount     Int
  currency   String
  chargeId   String   @unique
  timestamp  DateTime
  createdAt  DateTime @default(now())

  @@index([customerId])
  @@index([timestamp])
}

model Customer {
  id          String   @id
  email       String   @unique
  name        String?
  companyName String?
  planId      String?
  status      String // active, past_due, canceled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([email])
  @@index([status])
}


model Session {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  token      String   @unique
  expiresAt  DateTime
  userAgent  String?
  ipAddress  String?
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())

  @@index([token])
  @@index([userId])
}

model UserPreferences {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  theme           String   @default("system")
  editorConfig    Json? // Store editor preferences
  terminalConfig  Json? // Store terminal preferences
  notifyOnUpdates Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CodebaseIndex {
  id          String    @id @default(cuid())
  name        String
  path        String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  fileCount   Int       @default(0)
  lastIndexed DateTime?
  status      String // indexing, completed, failed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, path])
  @@index([userId])
}

enum ApiKeyType {
  TERMINAL
  API
}

model ApiKey {
  id        String     @id @default(cuid())
  name      String
  key       String     @unique
  type      ApiKeyType @default(TERMINAL)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lastUsed  DateTime?
  expiresAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([key])
}
